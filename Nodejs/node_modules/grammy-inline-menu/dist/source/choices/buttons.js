"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createChoiceTextFunction = exports.generateChoicesPaginationButtons = exports.generateChoicesButtons = void 0;
const pagination_js_1 = require("../buttons/pagination.js");
const align_js_1 = require("../buttons/align.js");
const understand_choices_js_1 = require("./understand-choices.js");
function generateChoicesButtons(actionPrefix, isSubmenu, choices, options) {
    return async (context, path) => {
        if (await options.hide?.(context, path)) {
            return [];
        }
        const choicesConstant = typeof choices === 'function' ? await choices(context) : choices;
        const choiceKeys = (0, understand_choices_js_1.getChoiceKeysFromChoices)(choicesConstant);
        (0, understand_choices_js_1.ensureCorrectChoiceKeys)(actionPrefix, path, choiceKeys);
        const textFunction = createChoiceTextFunction(choicesConstant, options.buttonText);
        const currentPage = await options.getCurrentPage?.(context);
        const keysOfPage = (0, align_js_1.getButtonsOfPage)(choiceKeys, options.columns, options.maxRows, currentPage);
        const buttonsOfPage = await Promise.all(keysOfPage
            .map(async (key) => {
            const text = await textFunction(context, key);
            const relativePath = actionPrefix + ':' + key + (isSubmenu ? '/' : '');
            return { text, relativePath };
        }));
        const rows = (0, align_js_1.getButtonsAsRows)(buttonsOfPage, options.columns);
        if (options.setPage) {
            rows.push(generateChoicesPaginationButtons(actionPrefix, choiceKeys.length, currentPage, options));
        }
        return rows;
    };
}
exports.generateChoicesButtons = generateChoicesButtons;
function generateChoicesPaginationButtons(actionPrefix, choiceKeys, currentPage, options) {
    const entriesPerPage = (0, align_js_1.maximumButtonsPerPage)(options.columns, options.maxRows);
    const totalPages = choiceKeys / entriesPerPage;
    const pageRecord = (0, pagination_js_1.createPaginationChoices)(totalPages, currentPage);
    const pageKeys = Object.keys(pageRecord).map(Number);
    const pageButtons = pageKeys
        .map((page) => ({
        relativePath: `${actionPrefix}P:${page}`,
        text: pageRecord[page],
    }));
    return pageButtons;
}
exports.generateChoicesPaginationButtons = generateChoicesPaginationButtons;
function createChoiceTextFunction(choices, buttonText) {
    if (buttonText) {
        return buttonText;
    }
    return (_, key) => (0, understand_choices_js_1.getChoiceTextByKey)(choices, key);
}
exports.createChoiceTextFunction = createChoiceTextFunction;
//# sourceMappingURL=buttons.js.map